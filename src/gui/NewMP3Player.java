/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.event.InputEvent;
import objects.MP3;
import java.io.File;
import java.util.ArrayList;
import java.util.Map;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.UIManager;
import javax.swing.filechooser.FileFilter;
import javax.swing.plaf.nimbus.NimbusLookAndFeel;
import javazoom.jlgui.basicplayer.BasicController;
import javazoom.jlgui.basicplayer.BasicPlayerEvent;
import javazoom.jlgui.basicplayer.BasicPlayerEventLauncher;
import javazoom.jlgui.basicplayer.BasicPlayerListener;
import objects.MP3Player;
import utils.FileUtils;
import utils.MP3FileFilter;
import utils.SkinUtils;

/**
 *
 * @author useR
 */
public class NewMP3Player extends JFrame implements BasicPlayerListener {
    private static final String MP3_FILE_EXTENTION = "mp3";
    private static final String MP3_FILE_DESCRIPTION = "MP3 Files";
    private static final String PLS_FILE_EXTENTION = "pls";
    private static final String PLS_FILE_DESCRIPTION = "PLS Files";
    private static final String EMPTY_STRING = "";
    private static final String INPUT_SONG_NAME = "Input a song name";
    private DefaultListModel mp3ListModel = new DefaultListModel();
    private FileFilter fileFilter = new MP3FileFilter(MP3_FILE_EXTENTION, MP3_FILE_DESCRIPTION);
    private FileFilter playListFilter = new MP3FileFilter(PLS_FILE_EXTENTION, PLS_FILE_DESCRIPTION);
    private MP3Player player = new MP3Player(this);
    
    private long secondsAmount;
    private long duration;
    private int bytesLen;
    private double posValue = 0.0;
    private boolean movingFromJump = false;
    private boolean moveAutomatic = true;
   

    /**
     * Creates new form NewMP3Player
     */
    public NewMP3Player() {
        initComponents();
    }
    
      private void playFile() {
       int[] indexPlayList = playList.getSelectedIndices();
       if(indexPlayList.length > 0){
           MP3 mp3 = (MP3) mp3ListModel.getElementAt(indexPlayList[0]);
           player.play(mp3.getPath());
           player.setVolume(volumeSlider.getValue(), volumeSlider.getMaximum());
       }
    }
    
    private boolean selectPrevSong(){
        int nextIndex = playList.getSelectedIndex() - 1;
        if(nextIndex >= 0){
            playList.setSelectedIndex(nextIndex);
            return true;
        }
        return false;
    }
 private boolean selectNextSong(){
        int nextIndex = playList.getSelectedIndex() + 1;
        if(nextIndex <= playList.getModel().getSize() - 1){
            playList.setSelectedIndex(nextIndex);
            return true;
        }
        return false;
    }

     @Override
    public void opened(Object o, Map map) {
        duration = (long) Math.round((((Long) map.get("duration")).longValue()) / 1000000);
        bytesLen = (int) Math.round(((Integer) map.get("mp3.length.bytes")).intValue());
        
        String songName = map.get("title") != null ? map.get("title").toString() : FileUtils.getFileNameWithoutExtension(new File(o.toString()).getName());
        if(songName.length() > 30){
            songName = songName.substring(0, 30) + "...";
        }
        songNameLabel.setText(songName);
    }

    @Override
    public void progress(int bytesread, long microseconds, byte[] pcmdata, Map properties) {
        float progress = -1.0f;
        if((bytesread > 0) && (duration > 0)){
            progress = bytesread * 1.0f / bytesLen * 1.0f;
        }
        
        secondsAmount = (long) (duration * progress);
        if(duration != 0){
            if(movingFromJump == false){
                songSlider.setValue(((int) Math.round(secondsAmount * 1000 / duration)));
            }
        }
    }

    @Override
    public void stateUpdated(BasicPlayerEvent bpe) {
       int state = bpe.getCode();
        switch (state) {
            case BasicPlayerEvent.PLAYING:
                movingFromJump = false;
                break;
            case BasicPlayerEvent.SEEKING:
                movingFromJump = true;
                break;
            case BasicPlayerEvent.EOM:
                if(selectNextSong()){
                    playFile();
                }    break;
            default:
                break;
        }
    }

    @Override
    public void setController(BasicController bc) {
       
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        buttonGroup1 = new javax.swing.ButtonGroup();
        searchPanel = new javax.swing.JPanel();
        btnFind = new javax.swing.JButton();
        searchField = new javax.swing.JTextField();
        mainPanel = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        downButton = new javax.swing.JButton();
        upButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        playList = new javax.swing.JList<>();
        volumeSlider = new javax.swing.JSlider();
        tglButton = new javax.swing.JToggleButton();
        prevButton = new javax.swing.JButton();
        playButton = new javax.swing.JButton();
        pauseButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        songNameLabel = new javax.swing.JLabel();
        songSlider = new javax.swing.JSlider();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        propertiesMenu = new javax.swing.JMenu();
        skinMenu = new javax.swing.JMenu();
        skinMenuItem1 = new javax.swing.JMenuItem();
        skinMenuItem2 = new javax.swing.JMenuItem();

        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.setMultiSelectionEnabled(true);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnFind.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/search_16.png"))); // NOI18N
        btnFind.setText("Find");
        btnFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindActionPerformed(evt);
            }
        });

        searchField.setText("Put a song to search");
        searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnFind)
                .addGap(25, 25, 25))
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFind)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50))
        );

        mainPanel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                mainPanelFocusGained(evt);
            }
        });

        addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/plus_16.png"))); // NOI18N
        addButton.setToolTipText("Add a song to playlist");
        addButton.setMaximumSize(new java.awt.Dimension(32, 32));
        addButton.setMinimumSize(new java.awt.Dimension(16, 16));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        removeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/remove_icon.png"))); // NOI18N
        removeButton.setToolTipText("Remove song from playlist");
        removeButton.setMaximumSize(new java.awt.Dimension(32, 32));
        removeButton.setMinimumSize(new java.awt.Dimension(16, 16));
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        downButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/arrow-down-icon.png"))); // NOI18N
        downButton.setMaximumSize(new java.awt.Dimension(32, 32));
        downButton.setMinimumSize(new java.awt.Dimension(16, 16));
        downButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downButtonActionPerformed(evt);
            }
        });

        upButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/arrow-up-icon.png"))); // NOI18N
        upButton.setToolTipText("Up song");
        upButton.setMaximumSize(new java.awt.Dimension(32, 32));
        upButton.setMinimumSize(new java.awt.Dimension(16, 16));
        upButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upButtonActionPerformed(evt);
            }
        });

        playList.setModel(mp3ListModel);
        playList.setToolTipText("List of songs");
        playList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(playList);

        volumeSlider.setMaximum(200);
        volumeSlider.setMinorTickSpacing(5);
        volumeSlider.setSnapToTicks(true);
        volumeSlider.setValue(100);
        volumeSlider.setMaximumSize(new java.awt.Dimension(200, 22));
        volumeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                volumeSliderStateChanged(evt);
            }
        });

        tglButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/speaker.png"))); // NOI18N
        tglButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tglButton.setMaximumSize(new java.awt.Dimension(32, 32));
        tglButton.setMinimumSize(new java.awt.Dimension(16, 16));
        tglButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/mute.png"))); // NOI18N
        tglButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tglButtonActionPerformed(evt);
            }
        });

        prevButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/prev-icon.png"))); // NOI18N
        prevButton.setToolTipText("Previous song");
        prevButton.setMaximumSize(new java.awt.Dimension(32, 32));
        prevButton.setMinimumSize(new java.awt.Dimension(16, 16));
        prevButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevButtonActionPerformed(evt);
            }
        });

        playButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Play.png"))); // NOI18N
        playButton.setToolTipText("Play a song");
        playButton.setMaximumSize(new java.awt.Dimension(32, 32));
        playButton.setMinimumSize(new java.awt.Dimension(16, 16));
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        pauseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Pause-icon.png"))); // NOI18N
        pauseButton.setToolTipText("Pause");
        pauseButton.setMaximumSize(new java.awt.Dimension(32, 32));
        pauseButton.setMinimumSize(new java.awt.Dimension(16, 16));
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButtonActionPerformed(evt);
            }
        });

        stopButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/stop-red-icon.png"))); // NOI18N
        stopButton.setToolTipText("Stop");
        stopButton.setMaximumSize(new java.awt.Dimension(32, 32));
        stopButton.setMinimumSize(new java.awt.Dimension(16, 16));
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        nextButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/next-icon.png"))); // NOI18N
        nextButton.setToolTipText("Next song");
        nextButton.setMaximumSize(new java.awt.Dimension(32, 32));
        nextButton.setMinimumSize(new java.awt.Dimension(16, 16));
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        songSlider.setMaximum(1000);
        songSlider.setPaintLabels(true);
        songSlider.setToolTipText("Song name");
        songSlider.setValue(100);
        songSlider.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        songSlider.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        songSlider.setMaximumSize(new java.awt.Dimension(20000, 22));
        songSlider.setPreferredSize(new java.awt.Dimension(150, 26));
        songSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slideProgressDataChanged(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(songNameLabel)
                .addGap(245, 245, 245))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(tglButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(volumeSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(upButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(downButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(prevButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(playButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pauseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(songSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(removeButton, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                        .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                        .addComponent(upButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(downButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(songNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(songSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tglButton, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(volumeSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pauseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(prevButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        fileMenu.setText("File");
        fileMenu.setToolTipText("");

        openMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/open-icon.png"))); // NOI18N
        openMenuItem.setText("Open Playlist");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save_16.png"))); // NOI18N
        saveMenuItem.setText("Save Playlist");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        exitMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/exit.png"))); // NOI18N
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        jMenuBar1.add(fileMenu);

        propertiesMenu.setText("Properties");

        skinMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gear_16.png"))); // NOI18N
        skinMenu.setText("Skin");
        skinMenu.setToolTipText("Change a template");

        skinMenuItem1.setText("Skin1");
        skinMenuItem1.setToolTipText("Template #1");
        skinMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                skinMenuItem1ActionPerformed(evt);
            }
        });
        skinMenu.add(skinMenuItem1);

        skinMenuItem2.setText("Skin2");
        skinMenuItem2.setToolTipText("Template #2");
        skinMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                skinMenuItem2ActionPerformed(evt);
            }
        });
        skinMenu.add(skinMenuItem2);

        propertiesMenu.add(skinMenu);

        jMenuBar1.add(propertiesMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionPerformed
          String searchStr = searchField.getText();
        if(searchStr == null || searchStr.trim().equals(EMPTY_STRING)){
            return;
        }
        
        ArrayList<Integer> mp3FindedIndexes = new ArrayList<>();
        for(int i = 0; i < mp3ListModel.size(); i++){
            MP3 mp3 = (MP3) mp3ListModel.getElementAt(i);
            if(mp3.getName().toUpperCase().contains(searchStr.toUpperCase())){
                mp3FindedIndexes.add(i);
            }
        }
        
        int[] selectedIndexes = new int[mp3FindedIndexes.size()];
        
        if (selectedIndexes.length == 0){
            JOptionPane.showMessageDialog(this, "Nothing not found " + searchStr);
            searchField.requestFocus();
            searchField.selectAll();
            return;
        }
        for (int i = 0; i < selectedIndexes.length; i++){
            selectedIndexes[i] = mp3FindedIndexes.get(i).intValue();
        }
        
        playList.setSelectedIndices(selectedIndexes);
    }//GEN-LAST:event_btnFindActionPerformed

    private void skinMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skinMenuItem1ActionPerformed
        SkinUtils.changeSkin(this, new NimbusLookAndFeel());
    }//GEN-LAST:event_skinMenuItem1ActionPerformed

    private void skinMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skinMenuItem2ActionPerformed
        SkinUtils.changeSkin(this, UIManager.getSystemLookAndFeelClassName());
    }//GEN-LAST:event_skinMenuItem2ActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
       FileUtils.addFileFilter(fileChooser, playListFilter);
       int result = fileChooser.showSaveDialog(this);
       if(result == JFileChooser.APPROVE_OPTION)
       {
           File selectedFile = fileChooser.getSelectedFile();
           if(selectedFile.exists()){
               int resultOvveride = JOptionPane.showConfirmDialog(this, "File exists", "Rewrite?", JOptionPane.YES_NO_CANCEL_OPTION);
               switch(resultOvveride){
                   case JOptionPane.NO_OPTION:
                       saveMenuItemActionPerformed(evt);
                       return;
                   case JOptionPane.CANCEL_OPTION:
                       fileChooser.cancelSelection();
                       return;
               }
               fileChooser.approveSelection();
               
           }
           String fileExtention = FileUtils.getFileExtension(selectedFile);
               String fileNameForSave = (fileExtention != null && fileExtention.equals(PLS_FILE_EXTENTION))? selectedFile.getPath() : selectedFile.getPath() + "." + PLS_FILE_EXTENTION;
               
               FileUtils.serialize(mp3ListModel, fileNameForSave);
       }
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        FileUtils.addFileFilter(fileChooser, playListFilter);
        int result = fileChooser.showOpenDialog(this);
        
        if(result == JFileChooser.APPROVE_OPTION){
           File selectedFile = fileChooser.getSelectedFile();
           DefaultListModel mp3ListModel = (DefaultListModel)FileUtils.deSerialize(selectedFile.getPath());
           this.mp3ListModel = mp3ListModel;
           playList.setModel(mp3ListModel);
        }
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void searchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFieldActionPerformed
      
    }//GEN-LAST:event_searchFieldActionPerformed

    private void mainPanelFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mainPanelFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_mainPanelFocusGained

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
           int nextIndex = playList.getSelectedIndex() + 1;
           while(nextIndex <= playList.getModel().getSize() - 1){
               playList.setSelectedIndex(nextIndex);
               MP3 mp3 = (MP3) mp3ListModel.getElementAt(playList.getSelectedIndex() + 1);
               player.play(mp3.getPath());
               player.setVolume(volumeSlider.getValue(), volumeSlider.getMaximum());
           }
    }//GEN-LAST:event_nextButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        player.stop();
    }//GEN-LAST:event_stopButtonActionPerformed

    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
        player.pause();
    }//GEN-LAST:event_pauseButtonActionPerformed

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        int[] indexPlaylist = playList.getSelectedIndices();
        if(indexPlaylist.length > 0){
            MP3 mp3 = (MP3) mp3ListModel.getElementAt(indexPlaylist[0]);
            player.play(mp3.getPath());
            player.setVolume(volumeSlider.getValue(), volumeSlider.getMaximum());
        }

    }//GEN-LAST:event_playButtonActionPerformed

    private void volumeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_volumeSliderStateChanged
        player.setVolume(volumeSlider.getValue(), volumeSlider.getMaximum());
        if(volumeSlider.getValue() == 0){
            tglButton.setSelected(true);
        } else {
            tglButton.setSelected(false);
        }
    }//GEN-LAST:event_volumeSliderStateChanged

    private void playListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playListMouseClicked
        if (evt.getModifiers() == InputEvent.BUTTON1_MASK && evt.getClickCount() == 2){
            int[] indexPlaylist = playList.getSelectedIndices();
            if (indexPlaylist.length > 0){
                MP3 mp3 = (MP3) mp3ListModel.getElementAt(indexPlaylist[0]);
                player.play(mp3.getPath());
                player.setVolume(volumeSlider.getValue(), volumeSlider.getMaximum());
            }
        }
    }//GEN-LAST:event_playListMouseClicked

    private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upButtonActionPerformed
        int nextIndex = playList.getSelectedIndex() + 1;
        if(nextIndex <= playList.getModel().getSize() -1) {
            playList.setSelectedIndex(nextIndex);
        }

    }//GEN-LAST:event_upButtonActionPerformed

    private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downButtonActionPerformed
        int prevIndex = playList.getSelectedIndex() - 1;
        if(prevIndex >= 0){
            playList.setSelectedIndex(prevIndex);
        }
    }//GEN-LAST:event_downButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        int[] indexPlaylist = playList.getSelectedIndices();
        if(indexPlaylist.length > 0){
            ArrayList<MP3> mp3ListToRemove = new ArrayList<MP3>();
            for(int i = 0; i < indexPlaylist.length; i++){
                MP3 mp3 = (MP3) mp3ListModel.getElementAt(indexPlaylist[i]);
                mp3ListToRemove.add(mp3);
            }
            for(MP3 mp3: mp3ListToRemove){
                mp3ListModel.removeElement(mp3);
            }
        }
    }//GEN-LAST:event_removeButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        FileUtils.addFileFilter(fileChooser, fileFilter);
        int result = fileChooser.showOpenDialog(this);

        if(result == fileChooser.APPROVE_OPTION){
            File[] selectedFiles = fileChooser.getSelectedFiles();
            for(File file: selectedFiles){
                MP3 mp3 = new MP3(file.getName(), file.getPath());
                mp3ListModel.addElement(mp3);
            }
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void prevButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevButtonActionPerformed
        int prevIndex = playList.getSelectedIndex() - 1;
        while(prevIndex >= 0){
            playList.setSelectedIndex(prevIndex);
            MP3 mp3 = (MP3) mp3ListModel.getElementAt(playList.getSelectedIndex() - 1);
            player.play(mp3.getPath());
            player.setVolume(volumeSlider.getValue(), volumeSlider.getMaximum());
        }
    }//GEN-LAST:event_prevButtonActionPerformed
    private int currentVolumeValue;
    private void tglButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tglButtonActionPerformed
        if (tglButton.isSelected()) {
            currentVolumeValue = volumeSlider.getValue();
            volumeSlider.setValue(0);
        } else {
            volumeSlider.setValue(currentVolumeValue);
        }
    }//GEN-LAST:event_tglButtonActionPerformed

    private void slideProgressDataChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slideProgressDataChanged
         if(songSlider.getValueIsAdjusting() == false){
            if(moveAutomatic == true){
                moveAutomatic = false;
                posValue = songSlider.getValue() * 1.0 / 1000;
                processSeek(posValue);
            }  else {
                moveAutomatic = true;
                movingFromJump = true;
            }
        }
    }//GEN-LAST:event_slideProgressDataChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewMP3Player.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewMP3Player.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewMP3Player.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewMP3Player.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewMP3Player().setVisible(true);
            }
        });
    }
     private void processSeek(double bytes) {
            try {
                long skipBytes = (long) Math.round(((Integer) bytesLen).intValue() * bytes);
                player.jump(skipBytes);
            } catch(Exception e){
                e.printStackTrace();
                movingFromJump = false;
            }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton btnFind;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton downButton;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton nextButton;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JButton pauseButton;
    private javax.swing.JButton playButton;
    private javax.swing.JList<String> playList;
    private javax.swing.JButton prevButton;
    private javax.swing.JMenu propertiesMenu;
    private javax.swing.JButton removeButton;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JTextField searchField;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JMenu skinMenu;
    private javax.swing.JMenuItem skinMenuItem1;
    private javax.swing.JMenuItem skinMenuItem2;
    private javax.swing.JLabel songNameLabel;
    private javax.swing.JSlider songSlider;
    private javax.swing.JButton stopButton;
    private javax.swing.JToggleButton tglButton;
    private javax.swing.JButton upButton;
    private javax.swing.JSlider volumeSlider;
    // End of variables declaration//GEN-END:variables


 
  
}
